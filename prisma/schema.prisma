generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String @unique
  email     String   @unique
  gender    String
  attractedTo  String
  firstName String
  lastName  String
  isAdmin   Boolean @default(false)
  reviews   Review[]
  surveys   Survey[]
}

model Restaurant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  location    Location @relation(fields: [locationId], references: [id])
  locationId  String   @unique @db.ObjectId
  reviews     Review[]
  ranking     Ranking?
  ratings     Rating[]
}

model Location {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  district   String
  latitude   Float
  longitude  Float
  restaurant Restaurant?
}

model Review {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  comment      String
  score        Float
  success      Boolean
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @db.ObjectId
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String     @db.ObjectId
}

model Ranking {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  ranking      Float
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique @db.ObjectId
}

model Rating {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @db.ObjectId
  location     Float
  food         Float
  ambient      Float
  service      Float
  price        Float
  waitingTime  Float
  security     Float
  success      Float
  parking      Float
  surveys      Survey[]
}

model Survey {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Rating   @relation(fields: [ratingId], references: [id])
  ratingId   String   @db.ObjectId
  answeredBy User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
}

model Worker {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  task      String
}


model Playlist {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  url    String
  type   Type @relation(fields: [typeId], references: [id])
  typeId String   @db.ObjectId
}

model Type {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  genre Genre @relation(fields: [genreId], references: [id])
  genreId String   @db.ObjectId
  playlist   Playlist[]
}

model Genre {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  Type   Type[]
}
